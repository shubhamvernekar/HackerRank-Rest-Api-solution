center approach o(n^2)

class Solution {
    public String longestPalindrome(String s) {
        int start = 0, end = 0;
        
        for(int i = 0; i < s.length(); i++) {
            int len = isPalindrome(s, i, i);
            int len1 = isPalindrome(s, i, i+1);
            len = Math.max(len, len1);

            if(end - start+1 < len) {
                start = i - (len-1)/2;
                end = i + (len)/2;
            }
        }
        return s.substring(start, end+1);
    }
    
    private int isPalindrome(String str, int s, int e) {
        while(s >= 0 && e < str.length() && str.charAt(s) == str.charAt(e)) {
            s--;
            e++;
        }
        return e-s-1;
    }
}

Using dynamic programming o(n^2)

class Solution {
    public String longestPalindrome(String s) {
        int len = s.length(), start = 0, end = 0;
        int matrix[][] = new int[len][len];
        
        if (s.length() == 0)
            return s;
        
        for(int i = 1; i <= len; i++) {
            for(int j = 0; j <= len - i; j++) {
                if(i == 1) {
                    matrix[j][j] = 1;
                } else if(i == 2) {
                    if(s.charAt(j) == s.charAt(j+1)) {
                        matrix[j][j+1] = 1;
                        if (end - start < 1) {
                            start = j;
                            end = j+i;
                        }
                    }
                    else 
                        matrix[j][j+1] = 0;
                } else {
                    if(s.charAt(j) == s.charAt(j + i-1) && matrix[j+1][j + i-2] == 1) {
                        matrix[j][j+i-1] = 1;
                        if (end - start < i+j -j) {
                            start = j;
                            end = j+i;
                        }
                    }
                }
            }
        }
        
        if (end == 0) {
            end++;
        }

        return s.substring(start, end);
    }
}
